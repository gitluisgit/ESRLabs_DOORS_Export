// Timeout interval set to 0 (unlimited) number of DXL execution cycles to 
// prevent timeouts from crashing
pragma runLim, 0 

/************************************************ 
************** Variable definition **************
************************************************/
Module m = null
Folder f = null
//Folder root = folder("/")
Link l = null
Module LinkMod = null
Object o = null

/* DOORS Hierarchy
	relative - ../folder/module
	absolute - /folder/module 
	
	/Interview/ESR_Interview
	/ESR_Interview/ESR_Interview_Links	*/
string ModuleName = "ESR_Interview"
string ModuleFolder = "Interview"
string linkModuleName = "ESR_Interview_Links"
string linkModuleFolder = "ESR_Interview"
string ModulePath = "\Interview\ESR_Interview"
string ModulePath = "\ESR_Interview\ESR_Interview_Links"

string attribobjtyp = "Objekttyp"
string attribobjreq = "Requirements"
string attribobjdev = "Development Responsible"

string attribobjoid = "Object ID"
string attribobjimp = "Implementation Status ESRLabs"
string attribobjtxt = "Object Text"

string attribute_1 = ""
string attribute_2 = ""
string attribute_3 = ""

string filtertext1 = "Anforderung"
string filtertext2 = "Valid"
string filtertext3 = "ESRLabs"

int numreqs = 0; 
int reqcount = 0;
int linkcount = 0;
int objcount = 0;
Item i;

Stream export = write("Export_esr_interview.csv")

filtering off
level 0

/************************************************ 
**************** Error Exceptions ***************
************************************************/
f = folder(ModuleFolder)
m = read(ModuleName,true)

if (null f) {
	ack "Could not find Folder"
	//print("Please run this script from an open module.\n")
	halt
}
if (null m) {
	ack "Please run this script from an open module."
	//print("Please run this script from an open module.\n")
	halt
}
if (null export) {
	ack "Error while trying to open export file."
	//print("Error while trying to open export file " export "\n")
	halt
}

/************************************************ 
****************** Main Function ****************
************************************************/

/* CSV Header */
//outfile << "Number of Requirements,"
outfile << attribobjoid ","
outfile << attribobjimp ","
outfile << "countOfLinks,"
outfile << attribobjtxt "\n"

for o in m do {
	attribute_1 = o.attribobjtyp
	attribute_2 = o.attribobjreq
	attribute_3 = o.attribobjdev
	
	if (!exists attribute attribute_1) {
		ack "Attribute '" attribute_1 "' has not been found in module."
		//print("Attribute '" attribute_1 "' has not been found in module."\n")
		halt
	}
	if (!exists attribute attribute_2) {
		ack "Attribute '" attribute_2 "' has not been found in module."
		//print("Attribute '" attribute_2 "' has not been found in module."\n")
		halt
	}
	if (!exists attribute attribute_3) {
		ack "Attribute '" attribute_3 "' has not been found in module."
		//print("Attribute '" attribute_3 "' has not been found in module."\n")
		halt
	}
	
	objcount ++	
	
	if (attribute_1 == filtertext1) {
		if (attribute_2 == filtertext2) {
			if (attribute_3 = filtertext3) {		
				numreqs ++ 			
				for l in each(o) <- "*" do {	
					// LinkFolder = folder(l)
					LinkMod = module(l)
					// if ((LinkMod == linkModuleName) && (LinkFolder == linkFolderName)) {
					if (LinkMod == linkModuleName) {
						if (l.attribobjtyp == filtertext1) {
							if (l.attribobjreq == filtertext2) {
								linkcount ++
							} 
						}
					}
				}
				//outfile << numreqs ","
				outfile << o.attribobjoid ","
				outfile << o.attribobjimp ","
				outfile << linkcount ","
				outifle << o.attribobjtxt "\n"
			} 
		}
	}
}

print(numreqs "/" objcount "requirements exported from" fullName(m) "\n")
close(export)

/* EOF */